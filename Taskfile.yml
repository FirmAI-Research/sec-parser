version: '3'

tasks:

#####################################
### Composite Tasks and Shortcuts ###
#####################################

  pre-commit: 
    desc: Composite task to run all quick checks.
    cmds:
      - task unit
      - task lint-fix
      - task e2e-smoke

  p:
    desc: Shortcut for `task pre-commit`.
    deps:
      - pre-commit

  ci-cd-checks:
    desc: Composite task to run all CI/CD checks.
    cmds:
      - task unit
      - task lint
      - task e2e

######################
### Run Unit Tests ###
######################
# Note: also update .codecov.yml when changing the target coverage.

  unit:
    desc: Run unit tests and check code coverage.
    cmds:
      # Recommended coverage viewer in VSCode: https://marketplace.visualstudio.com/items?itemName=ryanluker.vscode-coverage-gutters
      - poetry run pytest -s --cov --cov-report=lcov:lcov.info --cov-report=term:skip-covered --cov-fail-under=60 tests/unit/

  unit-watch:
    desc: Run unit tests and check code coverage immediately when files change.
    cmds:
      # Recommended coverage viewer in VSCode: https://marketplace.visualstudio.com/items?itemName=ryanluker.vscode-coverage-gutters
      - poetry run ptw -- -s --cov --cov-report=lcov:lcov.info --cov-report=term:skip-covered --cov-fail-under=60 tests/unit/


###############################
### Code Quality Checks ###
###############################

  lint:
    desc: Lint the code without auto-fixing issues.
    cmds:
      - poetry run ruff check sec_parser/
      - poetry run mypy

  lint-fix:
    desc: Lint the code and auto-fix issues.
    cmds:
      - poetry run ruff check --fix sec_parser/
      - poetry run mypy

############################
### Run End-to-end Tests ###
############################

  e2e:
    desc: Run repeated end-to-end tests.
    cmds:
      # The CLI_ARGS variable allows passing custom arguments to the end-to-end test after "--". 
      # For instance, to run the test with specific parameters, use the command: 
      # task e2e -- --tests-per-core=5 --cores=2 --limit_documents=2
      - poetry run python -m tests.e2e.sec_parser {{.CLI_ARGS}}

  e2e-smoke:
    desc: Run a single end-to-end test for a single document. This is a useful way to verify if the parser is functioning (a so-called "smoke" test).
    cmds:
      - poetry run python -m tests.e2e.sec_parser --tests-per-core=1 --cores=1 --limit_documents=1

#######################
### Developer Tools ###
#######################

  visual:
    desc: Run the parser output visualizer (used for debugging and demos). This will open a browser window with the user interface.
    cmds:
      # PYTHONPATH is added to make streamlit watch file changes. Read more: https://docs.streamlit.io/knowledge-base/using-streamlit/streamlit-watch-changes-other-modules-importing-app
      - export PYTHONPATH=$PYTHONPATH:$(pwd)/sec_parser; poetry run streamlit run debug_tools/parser_output_visualizer/app.py --server.runOnSave=true

  docs:
    desc: Run the documentation server.
    cmds:
      - poetry run sphinx-autobuild docs/source docs/build/html

  poetry:
    desc: "Run any poetry command that modifies dependencies. Example: task poetry -- add requests"
    cmds:
      - poetry {{.CLI_ARGS}}  
      - poetry export --with doc -f requirements.txt --output docs/rtd_requirements.txt
