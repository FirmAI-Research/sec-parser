version: '3'

tasks:

#####################################
### Composite Tasks and Shortcuts ###
#####################################

  pre-commit: 
    desc: Composite task to run all quick checks.
    cmds:
      - task unit
      - task lint-fix

  p:
    desc: Shortcut for `task pre-commit`.
    deps:
      - pre-commit

  ci-cd-checks:
    desc: Composite task to run all CI/CD checks.
    cmds:
      - task unit
      - task lint

######################
### Run Unit Tests ###
######################

  unit:
    desc: Run unit tests and check code coverage.
    cmds:
      # Recommended coverage viewer in VSCode: https://marketplace.visualstudio.com/items?itemName=ryanluker.vscode-coverage-gutters
      # Note: also update .codecov.yml when changing the target coverage.
      - poetry run pytest -s --cov --cov-report=lcov:lcov.info --cov-report=term:skip-covered --cov-fail-under=90 tests/unit/

  unit-watch:
    desc: Run unit tests and check code coverage immediately when files change.
    cmds:
      # Recommended coverage viewer in VSCode: https://marketplace.visualstudio.com/items?itemName=ryanluker.vscode-coverage-gutters
      # Note: also update .codecov.yml when changing the target coverage.
      - poetry run ptw -- -- -s --cov --cov-report=lcov:lcov.info --cov-report=term:skip-covered --cov-fail-under=90 tests/unit/


###########################
### Code Quality Checks ###
###########################

  lint:
    desc: Lint the code without auto-fixing issues.
    cmds:
      - poetry run ruff check sec_parser/
      - poetry run mypy

  lint-fix:
    desc: Lint the code and auto-fix issues.
    cmds:
      - poetry run ruff check --fix sec_parser/
      - poetry run mypy

############################
### Run End-to-end Tests ###
############################

  e2e-generate:
    desc: Generate the end-to-end dataset snapshots with the latest parser results.
    cmds:
      # Check if the sec-parser-e2e-data directory exists.
      - if [ ! -d "{{.ROOT_DIR}}/../sec-parser-e2e-data" ]; then echo "Directory ../sec-parser-e2e-data does not exist. Please use \"git clone\" to download it from https://github.com/alphanome-ai/sec-parser-e2e-data. Aborting."; exit 1; fi
      # Abort if there are any changes in the working tree or index.
      - if git diff --exit-code > /dev/null 2>&1 && git diff --cached --exit-code > /dev/null 2>&1; then :; else echo "Changes detected in the working tree or index. Please commit or stash them before proceeding."; exit 1; fi
      # Generate snapshots.
      - poetry run python -m tests.e2e generate {{.CLI_ARGS}}
      # Print a message for manual review of the snapshot.
      - echo "Success! Now, please manually review the generated snapshot. If it appears correct, commit it to the sec-parser-e2e-data repository. Remember to include the sec-parser hash in the commit message."
      # Get the current commit hash of the repository.
      - echo "Generated by sec-parser, commit hash $(git rev-parse HEAD)"

  e2e-verify:
    desc: Verify the end-to-end dataset snapshots against the latest parser results.
    cmds:
      # Check if the sec-parser-e2e-data directory exists.
      - if [ ! -d "{{.ROOT_DIR}}/../sec-parser-e2e-data" ]; then echo "Directory ../sec-parser-e2e-data does not exist. Please use \"git clone\" to download it from https://github.com/alphanome-ai/sec-parser-e2e-data. Aborting."; exit 1; fi
      # Abort if there are any changes in the working tree or index of the sec-parser-e2e-data repository. 
      - if git diff --exit-code > /dev/null 2>&1 && git diff --cached --exit-code > /dev/null 2>&1; then :; else echo "Changes detected in the working tree or index of the sec-parser-e2e-data repository. Please commit or stash them before proceeding."; exit 1; fi
      # Verify the snapshots.
      - poetry run python -m tests.e2e verify {{.CLI_ARGS}}
      # Print a message indicating the verification was successful.
      - echo "Verification of the end-to-end snapshots completed successfully."

#######################
### Developer Tools ###
#######################

  dash:
    desc: Launch the debug dashboard for debugging and demos.
    cmds:
      # Extend PYTHONPATH to allow Streamlit to watch for file changes.
      # Learn more: https://docs.streamlit.io/knowledge-base/using-streamlit/streamlit-watch-changes-other-modules-importing-app
      - export PYTHONPATH=$PYTHONPATH:$(pwd)/sec_parser && poetry run streamlit run dev_utils/debug_dashboard/app.py --server.runOnSave=true

  docs:
    desc: Run the documentation server.
    cmds:
      - poetry run sphinx-autobuild docs/source docs/build/html

  poetry:
    desc: "Run any poetry command that modifies dependencies. Example: task poetry -- add requests"
    cmds:
      - poetry {{.CLI_ARGS}}  
      - poetry export --with doc -f requirements.txt --output docs/rtd_requirements.txt
